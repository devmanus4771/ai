Slip-14 ******

Q.1) Write a python program to sort the sentence in alphabetical order?
def sort_sentence(sentence):
    words = sentence.split()
    sorted_words = sorted(words)
    sorted_sentence = ' '.join(sorted_words)
    return sorted_sentence

if __name__ == "__main__":
    input_sentence = input("Enter a sentence: ")
    result = sort_sentence(input_sentence)
    print("Sorted Sentence:", result)

*********Q.2) Write a Python program to simulate n-Queens problem.

def print_chessboard(chessboard): 
     for row in chessboard: 
         print(" ".join(row)) 
  
 # Function to check if it's safe to place a queen at the given position 
def is_safe(chessboard, row, col, n): 
     # Check the column 
     for i in range(row): 
         if chessboard[i][col] == 'Q': 
             return False 
  
     # Check the upper left diagonal 
     for i, j in zip(range(row, -1, -1), range(col, -1, -1)): 
         if chessboard[i][j] == 'Q': 
             return False 
  
     # Check the upper right diagonal 
     for i, j in zip(range(row, -1, -1), range(col, n)): 
         if chessboard[i][j] == 'Q': 
             return False 
  
     return True 
  
 # Recursive function to solve the N-Queens problem using forward checking 
def solve_nqueens(chessboard, row, n): 
     if row >= n: 
         return True  # All queens are placed 
  
     for col in range(n): 
         if is_safe(chessboard, row, col, n): 
             chessboard[row][col] = 'Q'  # Place a queen 
  
             if solve_nqueens(chessboard, row + 1, n): 
                 return True 
  
             chessboard[row][col] = '.'  # If placing a queen doesn't lead to a solution, backtrack 
