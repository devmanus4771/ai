Slip-20 ********

*******Q.1) Build a bot which provides all the information related to you in college

install the ChatterBot library:

---> pip install chatterbot

from flask import Flask, request, jsonify

app = Flask(__name__)

# Replace these with your own information
your_name = "Your Name"
your_program = "Your Program"
your_year = "Your Year"
your_interests = ["Interest 1", "Interest 2", "Interest 3"]

@app.route('/college_bot', methods=['POST'])
def college_bot():
    data = request.get_json()

    if 'action' in data:
        action = data['action']

        if action == 'get_info':
            response = {
                'name': your_name,
                'program': your_program,
                'year': your_year,
                'interests': your_interests
            }
            return jsonify(response)
        else:
            return jsonify({'error': 'Invalid action'})

    return jsonify({'error': 'Action not provided'})

if __name__ == '__main__':
    app.run(debug=True)

Q.2) Write a Python program to implement Mini-Max Algorithm.


install the ChatterBot library:

---> pip install chatterbot

import math

def mini_max(board, depth, is_maximizing_player):
    if check_winner(board):
        return evaluate(board)

    if is_maximizing_player:
        max_eval = -math.inf
        for move in possible_moves(board):
            board[move] = 'X'
            eval = mini_max(board, depth + 1, False)
            board[move] = ' '  # undo the move
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in possible_moves(board):
            board[move] = 'O'
            eval = mini_max(board, depth + 1, True)
            board[move] = ' '  # undo the move
            min_eval = min(min_eval, eval)
        return min_eval

def check_winner(board):
    # Check for a winner or draw (you need to define this based on your game)
    return False

def evaluate(board):
    # Evaluate the current state of the board (you need to define this based on your game)
    return 0

def possible_moves(board):
    # Return a list of possible moves (you need to define this based on your game)
    return []

if __name__ == "__main__":
    # Example usage:
    initial_board = [' '] * 9  # Assume a Tic-Tac-Toe board for simplicity
    best_move = -1
    best_value = -math.inf

    for move in possible_moves(initial_board):
        initial_board[move] = 'X'
        move_value = mini_max(initial_board, 0, False)
        initial_board[move] = ' '  # undo the move

        if move_value > best_value:
            best_value = move_value
            best_move = move

    print(f"The best move is {best_move} with a value of {best_value}")

