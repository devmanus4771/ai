slip-5

Q1 Write a python program to implement Lemmatization using NLTK

First install NLTK
-->pip install nltk

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk.corpus import wordnet

nltk.download('punkt')
nltk.download('wordnet')

def get_wordnet_pos(word):
    """Map POS tag to the first character lemmatize() accepts"""
    tag = nltk.pos_tag([word])[0][1][0].upper()
    tag_dict = {
        'N': wordnet.NOUN,
        'V': wordnet.VERB,
        'R': wordnet.ADV,
        'J': wordnet.ADJ
    }
    return tag_dict.get(tag, wordnet.NOUN)

def lemmatize_text(text):
    lemmatizer = WordNetLemmatizer()
    tokens = word_tokenize(text)
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos=get_wordnet_pos(token)) for token in tokens]
    lemmatized_text = ' '.join(lemmatized_tokens)
    return lemmatized_text

if __name__ == "__main__":
    input_text = "The dogs are barking loudly in the garden."
    lemmatized_text = lemmatize_text(input_text.lower())  # Lowercasing for consistent results
    print("Original Text:", input_text)
    print("Lemmatized Text:", lemmatized_text)

Q.2) Write a Python program to implement Breadth First Search algorithm. Refer the following graph as an Input for the program. [Initial node=1,Goal node=8]
from collections import deque 
  
 # Define an example graph as an adjacency list 
graph = { 
     '1': ['2', '4'], 
     '2': ['3'], 
     '3': ['5', '6'], 
     '4': ['2'], 
     '5': ['7', '8'], 
     '6': ['8'],
     '7': ['8']
 } 
  
 # BFS traversal function 
def bfs(graph, start): 
     visited = set()  # To keep track of visited nodes 
     queue = deque()  # Create a queue for BFS 
  
     visited.add(start) 
     queue.append(start) 
  
     while queue: 
         node = queue.popleft() 
         print(node, end=' ') 
  
         for neighbor in graph[node]: 
             if neighbor not in visited: 
                 visited.add(neighbor) 
                 queue.append(neighbor) 
  
 # Main function to initiate BFS traversal 
def main(): 
     start_node = '1'  # You can change the starting node here 
     print("Breadth-First Search Traversal:") 
     bfs(graph, start_node) 
  
if __name__ == '__main__': 
     main()
