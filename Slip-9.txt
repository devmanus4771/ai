slip-9

Q.1) Write python program to solve 8 puzzle problem using A algorithm 

import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, cost=0, heuristic=0):
        self.state, self.parent, self.move, self.cost, self.heuristic = state, parent, move, cost, heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def manhattan_distance(state):
    return sum(abs((val-1)%3 - i%3) + abs((val-1)//3 - i//3) for i, val in enumerate(state) if val)

def neighbors(node):
    zero_i = node.state.index(0)
    moves = [1, -1, 3, -3]
    return [PuzzleNode(list(node.state[:zero_i] + [node.state[zero_i + m]] + node.state[zero_i + m + 1:]), node, m, node.cost + 1, manhattan_distance(node.state)) for m in moves if 0 <= zero_i + m < 9 and (m == 1 or m == -1 or m == 3 or m == -3)]

def print_solution(node):
    moves = []
    while node.parent:
        moves.append("Move right" if node.move == 1 else "Move left" if node.move == -1 else "Move down" if node.move == 3 else "Move up")
        node = node.parent
    moves.reverse()
    print("Solution found!\n" + '\n'.join(moves))

def solve_puzzle(initial_state):
    goal, frontier, explored = [1, 2, 3, 4, 5, 6, 7, 8, 0], [PuzzleNode(initial_state, None, None, 0, manhattan_distance(initial_state))], set()

    while frontier:
        current_node = heapq.heappop(frontier)

        if current_node.state == goal:
            print_solution(current_node)
            return

        explored.add(tuple(current_node.state))

        for neighbor in [n for n in neighbors(current_node) if tuple(n.state) not in explored]:
            heapq.heappush(frontier, neighbor)

    print("No solution found.")

if __name__ == "__main__":
    # Example usage:
    solve_puzzle([1, 2, 3, 4, 5, 6, 0, 7, 8])  # Replace with your initial state

Q.2) Write a Python program to solve water jug problem. 2 jugs with capacity 5 gallon and 7 gallon are given with unlimited water supply respectively. The target to achieve is 4 gallon of water in second jug.

def water_jug_problem(capacity_x, capacity_y, target): 
     jug_x = 0 
     jug_y = 0 
  
     while jug_x != target and jug_y != target: 
         print(f"Jug X: {jug_x}L, Jug Y: {jug_y}L") 
  
         # Fill jug X if it is empty 
         if jug_x == 0: 
             jug_x = capacity_x 
             print("Fill Jug X") 
  
         # Transfer water from jug X to jug Y if jug X is not empty 
         elif jug_x > 0 and jug_y < capacity_y: 
             transfer = min(jug_x, capacity_y - jug_y) 
             jug_x -= transfer 
             jug_y += transfer 
             print("Transfer from Jug X to Jug Y") 
  
         # Empty jug Y if it is full 
         elif jug_y == capacity_y: 
             jug_y = 0 
             print("Empty Jug Y") 
  
     print(f"Jug X: {jug_x}L, Jug Y: {jug_y}L") 
     print("Solution Found!") 
  
 # Main function to initiate the problem 
def main(): 
     capacity_x = 5  # Capacity of jug X 
     capacity_y = 7  # Capacity of jug Y 
     target = 4     # Amount of water to measure 
  
     print("Solving Water Jug Problem:") 
     water_jug_problem(capacity_x, capacity_y, target) 
  
if __name__ == '__main__': 
     main()
