Slip-19

Q.1) Write a program to implement Hangman game using python. Hangman is a classic word-guessing game. The user should guess the word correctly by entering alphabets of the user choice. The Program will get input as single alphabet from the user and it will matchmaking with the alphabets in the original word.

import random

def choose_word():
    words = ["python", "hangman", "programming", "developer", "computer"]
    return random.choice(words)

def display_word(word, guessed_letters):
    return ''.join(letter if letter in guessed_letters else '_' for letter in word)

def hangman():
    word_to_guess = choose_word().lower()
    guessed_letters = set()
    attempts_left = 6

    print("Welcome to Hangman!")
    print(display_word(word_to_guess, guessed_letters))

    while attempts_left > 0:
        user_guess = input("Enter a letter: ").lower()

        if len(user_guess) != 1 or not user_guess.isalpha():
            print("Please enter a valid single letter.")
            continue

        if user_guess in guessed_letters:
            print("You've already guessed that letter.")
            continue

        guessed_letters.add(user_guess)

        if user_guess not in word_to_guess:
            attempts_left -= 1
            print(f"Wrong guess! Attempts left: {attempts_left}")
        else:
            print("Correct guess!")

        print(display_word(word_to_guess, guessed_letters))

        if '_' not in display_word(word_to_guess, guessed_letters):
            print("Congratulations! You've guessed the word.")
            break

    if attempts_left == 0:
        print(f"Sorry, you've run out of attempts. The word was: {word_to_guess}")

if __name__ == "__main__":
    hangman()

Q.2) Write a Python program to implement A* algorithm. Refer the following graph as an Input for the program.

import heapq

# Graph represented as an adjacency list
graph = {
    'A': {'B': 2, 'E': 3},
    'B': {'A': 2, 'C': 1,'F':9},
    'C': {'B': 1},
    'D': {'E': 6, 'F': 1},
    'E': {'A': 3, 'D': 6},
    'F': {'B': 9, 'D': 1},
}

# Heuristic function (replace with your own heuristic)
heuristic = {
    'A': 11,
    'B': 6,
    'C': 99,
    'D': 1,
    'E': 7,
    'F': 0,
    }

def astar(start, goal):
    priority_queue = [(0, start)]
    visited = set()

    while priority_queue:
        current_cost, current_node = heapq.heappop(priority_queue)

        if current_node == goal:
            return current_cost

        if current_node not in visited:
            visited.add(current_node)

            for neighbor, edge_cost in graph[current_node].items():
                heuristic_cost = heuristic[neighbor]
                total_cost = current_cost + edge_cost + heuristic_cost
                heapq.heappush(priority_queue, (total_cost, neighbor))

    return float('inf')  # No path found

if __name__ == "__main__":
    start_vertex = 'A'
    goal_vertex = 'F'

    result_cost = astar(start_vertex, goal_vertex)

    if result_cost != float('inf'):
        print(f"Cost from {start_vertex} to {goal_vertex} using A* algorithm: {result_cost}")
    else:
        print(f"No path found from {start_vertex} to {goal_vertex}.")
